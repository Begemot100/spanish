import sqlite3

import openai
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import os

env_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(env_path)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –∑–∞–¥–∞–Ω–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
import openai
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CallbackQueryHandler
import os

env_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(env_path)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –∑–∞–¥–∞–Ω–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
async def show_vocabulary_menu(update, context):
    query = update.callback_query
    await query.answer()

    # –¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
    topics = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
        "–°–µ–º—å—è",
        "–ï–¥–∞",
        "–¶–≤–µ—Ç–∞",
        "–ß–∏—Å–ª–∞",
        "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        "–ú–µ—Å—è—Ü—ã",
        "–ü–æ–≥–æ–¥–∞",
        "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        "–û–¥–µ–∂–¥–∞"
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º
    buttons = [[InlineKeyboardButton(text=topic, callback_data=f"vocab_{i}")] for i, topic in enumerate(topics)]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")])

    keyboard = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
async def generate_words(update, context):
    query = update.callback_query

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    selected_topic = context.user_data.get("selected_topic")

    if not selected_topic:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.callback_query.from_user.id
    connection = sqlite3.connect("language_learning.db")
    cursor = connection.cursor()

    cursor.execute("SELECT spanish_word FROM dictionary WHERE user_id = ?", (user_id,))
    existing_words = set(row[0] for row in cursor.fetchall())
    connection.close()

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"Generate a list of 10 random Spanish words related to the topic '{selected_topic}', with their Russian translations formatted as 'Spanish - Russian'"}
        ]
    )

    words = response["choices"][0]["message"]["content"].strip().split("\n")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞
    unique_words = [word for word in words if word.split(" - ")[0] not in existing_words]

    if len(unique_words) < 10:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["generated_words"] = unique_words[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–ª–æ–≤

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    generated_words_text = f"–í–æ—Ç 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ '{selected_topic}':\n\n" + "\n".join(unique_words[:10])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="check_self")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="vocabulary")]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(
        text=generated_words_text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Updater
# updater = Updater("YOUR_BOT_API_KEY")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# updater.dispatcher.add_handler(CallbackQueryHandler(show_vocabulary_menu, pattern="^vocabulary$"))
# updater.dispatcher.add_handler(CallbackQueryHandler(handle_topic_selection, pattern="^vocab_\\d+$"))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# updater.start_polling()
# updater.idle()
