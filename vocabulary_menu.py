import sqlite3

import openai
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CallbackQueryHandler

import os

env_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(env_path)

if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –∑–∞–¥–∞–Ω–∞.")

openai.api_key = os.getenv("OPENAI_API_KEY")




if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –∑–∞–¥–∞–Ω–∞.")



async def show_vocabulary_menu(update, context):
    query = update.callback_query
    await query.answer()

    topics = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
        "–°–µ–º—å—è",
        "–ï–¥–∞",
        "–¶–≤–µ—Ç–∞",
        "–ß–∏—Å–ª–∞",
        "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        "–ú–µ—Å—è—Ü—ã",
        "–ü–æ–≥–æ–¥–∞",
        "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        "–û–¥–µ–∂–¥–∞"
    ]

    buttons = [[InlineKeyboardButton(text=topic, callback_data=f"vocab_{i}")] for i, topic in enumerate(topics)]

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")])

    keyboard = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

async def generate_words(update, context):
    query = update.callback_query

    selected_topic = context.user_data.get("selected_topic")

    if not selected_topic:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    user_id = update.callback_query.from_user.id
    connection = sqlite3.connect("language_learning.db")
    cursor = connection.cursor()

    cursor.execute("SELECT spanish_word FROM dictionary WHERE user_id = ?", (user_id,))
    existing_words = set(row[0] for row in cursor.fetchall())
    connection.close()

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"Generate a list of 10 random Spanish words related to the topic '{selected_topic}', with their Russian translations formatted as 'Spanish - Russian'"}
        ]
    )

    words = response["choices"][0]["message"]["content"].strip().split("\n")

    unique_words = [word for word in words if word.split(" - ")[0] not in existing_words]

    if len(unique_words) < 10:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.")
        return

    context.user_data["generated_words"] = unique_words[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–ª–æ–≤

    generated_words_text = f"–í–æ—Ç 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ '{selected_topic}':\n\n" + "\n".join(unique_words[:10])

    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è", callback_data="check_self")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="vocabulary")]
    ]

    await query.edit_message_text(
        text=generated_words_text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

