import logging
import os
import sqlite3

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler,Updater, ContextTypes, MessageHandler, filters, Updater
import openai
from dotenv import load_dotenv
from db import create_db, get_user_profile, create_user
from test_self_vocabulary import start_test, handle_answer, handle_topic_selection, handle_vocabulary_action
from vocabulary_menu import show_vocabulary_menu, generate_words

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –∑–∞–¥–∞–Ω–∞.")

openai.api_key = api_key
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

def get_base_keyboard():
    buttons = [[InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]]
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:',
        reply_markup=get_base_keyboard()
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    buttons = [
        [InlineKeyboardButton(text="üìò –°–ª–æ–≤–∞—Ä—å", callback_data="dictionary")],
        [InlineKeyboardButton(text="üìù –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", callback_data="vocabulary")],
        [InlineKeyboardButton(text="üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="grammar")],
        [InlineKeyboardButton(text="üë• –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üÜò –•–µ–ª–ø", callback_data="help")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

async def handle_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    username = query.from_user.username or "unknown"

    user_data = get_user_profile(user_id)
    if not user_data:
        create_user(user_id, username)
        user_data = (username, 'basic', 0, 0)

    username, profile_type, grammar_progress, vocab_progress = user_data
    profile_info = (
        f"üë§ –ù–∏–∫: @{username}\n"
        f"üîñ –¢–∏–ø –ø—Ä–æ—Ñ–∏–ª—è: {profile_type.capitalize()}\n"
        f"üìö –ü—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏: {grammar_progress}%\n"
        f"üìò –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤: {vocab_progress}%"
    )

    await query.edit_message_text(text=profile_info, reply_markup=get_base_keyboard())

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:',
        reply_markup=get_base_keyboard()
    )

async def show_dictionary(update, context):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    connection = sqlite3.connect("language_learning.db")
    cursor = connection.cursor()
    cursor.execute("SELECT spanish_word, russian_translation FROM dictionary WHERE user_id = ?", (user_id,))
    words = cursor.fetchall()
    connection.close()

    if words:
        dictionary_text = "üìò –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n" + "\n".join([f"{spanish} - {russian}" for spanish, russian in words])
    else:
        dictionary_text = "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞."

    await query.edit_message_text(
        text=dictionary_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]])
    )


def main():
    create_db()  

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_menu, pattern="^menu$"))
    application.add_handler(CallbackQueryHandler(handle_profile, pattern="^profile$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_any_message))
    application.add_handler(CallbackQueryHandler(show_vocabulary_menu, pattern="^vocabulary$"))
    application.add_handler(CallbackQueryHandler(handle_topic_selection, pattern="^vocab_\\d+$"))
    application.add_handler(CallbackQueryHandler(start_test, pattern="^check_self$"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))

    application.add_handler(CallbackQueryHandler(generate_words, pattern="^vocab_\\d+$"))
    application.add_handler(CallbackQueryHandler(show_dictionary, pattern="^dictionary$"))

    application.run_polling()



if __name__ == "__main__":
    main()
