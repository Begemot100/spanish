import random
import sqlite3

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import openai
import os

from vocabulary_menu import generate_words

env_path = os.path.join(os.path.dirname(__file__), '.env')


load_dotenv(env_path)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –∑–∞–¥–∞–Ω–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai.api_key = os.getenv("OPENAI_API_KEY")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
connection = sqlite3.connect("language_learning.db")
cursor = connection.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS dictionary (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        spanish_word TEXT,
        russian_translation TEXT
    )
''')
connection.commit()
connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è"
async def start_test(update, context):
    query = update.callback_query
    await query.answer()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    selected_topic = context.user_data.get("selected_topic")

    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
    if not selected_topic:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"Generate a list of 10 random Spanish words related to the topic '{selected_topic}', with their Russian translations formatted as 'Spanish - Russian'"}
        ]
    )

    words = response["choices"][0]["message"]["content"].strip().split("\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    if not words:
        await query.edit_message_text(text="–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    context.user_data["words_for_test"] = words
    context.user_data["current_question_index"] = 0
    context.user_data["correct_count"] = 0
    context.user_data["incorrect_count"] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_question(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
async def handle_topic_selection(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã –∏–∑ callback_data
    topic_index = int(query.data.split("_")[1])

    # –°–ø–∏—Å–æ–∫ —Ç–µ–º
    topics = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
        "–°–µ–º—å—è",
        "–ï–¥–∞",
        "–¶–≤–µ—Ç–∞",
        "–ß–∏—Å–ª–∞",
        "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏",
        "–ú–µ—Å—è—Ü—ã",
        "–ü–æ–≥–æ–¥–∞",
        "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        "–û–¥–µ–∂–¥–∞"
    ]

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
    selected_topic = topics[topic_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_topic"] = selected_topic

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {selected_topic}. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤
    await generate_words(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤

async def handle_vocabulary_action(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    action_type = query.data.split("_")[1]  # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å "generate" –∏–ª–∏ "select"
    topic_index = int(query.data.split("_")[2])

    topics = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", "–°–µ–º—å—è", "–ï–¥–∞", "–¶–≤–µ—Ç–∞", "–ß–∏—Å–ª–∞",
        "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", "–ú–µ—Å—è—Ü—ã", "–ü–æ–≥–æ–¥–∞", "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–û–¥–µ–∂–¥–∞"
    ]

    selected_topic = topics[topic_index]

    if action_type == "generate":
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤
        await generate_words(update, context)
    elif action_type == "select":
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ç–µ–º—ã
        context.user_data["selected_topic"] = selected_topic
        await query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {selected_topic}. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!"
        )
        await start_test(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(update, context):
    words = context.user_data.get("generated_words", [])
    current_index = context.user_data.get("current_question_index", 0)

    if current_index >= len(words):
        await end_test(update, context)
        return

    current_word = words[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    correct_answer = current_word.split(' - ')[1]
    incorrect_answers = random.sample([word.split(' - ')[1] for word in words if word != current_word], 3)
    options = [correct_answer] + incorrect_answers
    random.shuffle(options)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["correct_answer"] = correct_answer

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    buttons = [[InlineKeyboardButton(text=option, callback_data=f"answer_{option}")] for option in options]
    keyboard = InlineKeyboardMarkup(buttons)

    await update.callback_query.edit_message_text(
        text=f"–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{current_word.split(' - ')[0]}'?",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(update, context):
    query = update.callback_query
    await query.answer()

    selected_answer = query.data.split("answer_")[1]
    correct_answer = context.user_data.get("correct_answer")

    if selected_answer == correct_answer:
        context.user_data["correct_count"] += 1
        response_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        context.user_data["incorrect_count"] += 1
        response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data["current_question_index"] += 1
    await ask_question(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
async def end_test(update, context):
    correct_count = context.user_data.get("correct_count", 0)
    total_questions = len(context.user_data.get("generated_words", []))
    correct_percentage = (correct_count / total_questions) * 100

    user_id = update.callback_query.from_user.id

    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–ª–æ–≤–∞—Ä—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω
    if correct_percentage >= 80:
        response_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correct_count} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤. –°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å."
        save_words_to_db(context.user_data.get("generated_words", []), user_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    else:
        response_text = f"üòû –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {correct_count} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–ª–æ–≤–∞–º
    update_vocab_progress(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ (–ø—Ä–∏–º–µ—Ä)
    update_grammar_progress(user_id)

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞
    context.user_data.clear()

    await update.callback_query.edit_message_text(
        text=response_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="vocabulary")]])
    )

def update_progress(user_id, vocab_progress=None, grammar_progress=None):
    connection = sqlite3.connect("language_learning.db")
    cursor = connection.cursor()

    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
    if vocab_progress is not None:
        cursor.execute("UPDATE users SET vocab_progress = ? WHERE user_id = ?", (vocab_progress, user_id))

    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
    if grammar_progress is not None:
        cursor.execute("UPDATE users SET grammar_progress = ? WHERE user_id = ?", (grammar_progress, user_id))

    connection.commit()
    connection.close()


def update_grammar_progress(user_id):
    # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
    # –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
    grammar_progress = 50  # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª 50% —Ç–µ—Å—Ç–æ–≤
    update_progress(user_id, grammar_progress=grammar_progress)

def update_vocab_progress(user_id):
    connection = sqlite3.connect("language_learning.db")
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT COUNT(*) FROM dictionary WHERE user_id = ?", (user_id,))
    total_words = cursor.fetchone()[0]

    # –¶–µ–ª—å –¥–ª—è 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî 1000 —Å–ª–æ–≤
    total_goal = 1000

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    vocab_progress = min((total_words / total_goal) * 100, 100)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_progress(user_id, vocab_progress=vocab_progress)

    connection.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_words_to_db(words, user_id):
    connection = sqlite3.connect("language_learning.db")
    cursor = connection.cursor()

    for word in words:
        spanish, russian = word.split(" - ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞
        cursor.execute("SELECT 1 FROM dictionary WHERE user_id = ? AND spanish_word = ?", (user_id, spanish))
        existing_word = cursor.fetchone()

        if not existing_word:  # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
            cursor.execute("INSERT INTO dictionary (user_id, spanish_word, russian_translation) VALUES (?, ?, ?)", (user_id, spanish, russian))
        else:
            print(f"–°–ª–æ–≤–æ '{spanish}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    connection.commit()

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    update_vocab_progress(user_id)

    connection.close()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ (–ø—Ä–∏–º–µ—Ä –≤ bot.py)
# application.add_handler(CallbackQueryHandler(start_test, pattern="^check_self$"))
# application.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))
